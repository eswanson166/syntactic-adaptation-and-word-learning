log.errors[i] = error
}
mean(log.errors)
?predict
u
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 10
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, n.test)
pred[probs > .5] = 1
print(pred)
#cm = table(predict=pred, truth=df.tst$y)
#print(cm)
#error = (cm[2] + cm[3]) / (2*n.test)
#log.errors[i] = error
}
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 10
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, n.test)
pred[probs > .5] = 1
print(probs)
print(pred)
#cm = table(predict=pred, truth=df.tst$y)
#print(cm)
#error = (cm[2] + cm[3]) / (2*n.test)
#log.errors[i] = error
}
cm = table(pred)
print(cm)
cm[1]
cm[1, 1]
cm[1,1]
cm[1][1]
cm[,2]
cm[[1]
]
cm[[2]]
cm[1[2]]
cm
cm[[0]]
cm[[3]]
mean(pred==y.tst)
mean(na.omit(pred==y.tst))
mean(na.omit(pred!=y.tst))
num.sim = 3
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 10
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, n.test)
pred[probs > .5] = 1
#print(probs)
#print(pred)
cm = table(pred)
print(cm)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
num.sim = 50
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 100
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, n.test)
pred[probs > .5] = 1
cm = table(pred)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
num.sim = 500
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 400
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, n.test)
pred[probs > .5] = 1
cm = table(pred)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
num.sim = 3
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 10
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, n.test)
pred[probs > .5] = 1
print(pred)
print(probs)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
num.sim = 3
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 10
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, n.test)
print(pred)
pred[probs > .5] = 1
print(pred)
print(probs)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
num.sim = 3
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 10
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, 2*n.test)
print(pred)
pred[probs > .5] = 1
print(pred)
print(probs)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
num.sim = 100
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 100
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, 2*n.test)
#print(pred)
pred[probs > .5] = 1
#print(pred)
#print(probs)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
num.sim = 1000
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 100
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, 2*n.test)
#print(pred)
pred[probs > .5] = 1
#print(pred)
#print(probs)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
num.sim = 5000
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 500
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, 2*n.test)
#print(pred)
pred[probs > .5] = 1
#print(pred)
#print(probs)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
num.sim = 5000
log.errors = rep(0, num.sim)
for(i in 1:num.sim){
# generate data
x1 = matrix(mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10)))
x2 = matrix(mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10)))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
x1 = mvrnorm(n = 50, mu = rep(0, 10), Sigma = diag(10))
x2 = mvrnorm(n = 50, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tr = rbind(x1, x2)
y = c(rep(0, 50), rep(1, 50))
# Log regression
df = data.frame(x=x.tr, y=as.factor(y))
glm.fit = glm(y~., data=df, family=binomial)
# test set
n.test = 500
x1.tst = mvrnorm(n = n.test, mu = rep(0, 10), Sigma = diag(10))
x2.tst = mvrnorm(n = n.test, mu = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0), Sigma = diag(10))
x.tst = rbind(x1.tst, x2.tst)
y.tst = c(rep(0, n.test), rep(1, n.test))
df.tst = data.frame(x=x.tst, y=as.factor(y.tst))
# error
probs = predict(glm.fit, newdata=df.tst, type="response")
pred = rep(0, 2*n.test)
#print(pred)
pred[probs > .5] = 1
#print(pred)
#print(probs)
error = mean(na.omit(pred!=y.tst))
log.errors[i] = error
}
mean(log.errors)
versionInfo()
packageVersion("rstudio")
knitr::opts_chunk$set(echo = TRUE)
source("helpers.R")
library(lme4)
library(dplyr)
library(tidyverse)
library(MuMIn)
library(languageR)
library(emmeans)
library(lmerTest)
setwd("~/Documents/honors-thesis/syntactic-adaptation-and-word-learning/analysis/2_adults_english/scripts")
source("helpers.R")
et_data <- read.csv("../data/clean_data.csv", stringsAsFactors = TRUE)
et_data %>% group_by(condition) %>%
summarise(n = length(unique(participant_id)))
et_data %>% group_by(gender) %>%
summarise(n = length(unique(participant_id)))
length(et_data$x[et_data$look_left_img == TRUE |
et_data$look_right_img == TRUE]) / length(et_data$x)
test_data <- et_data %>% filter(target_audio_type == "novel",
trial_stage == "event",
look_left_img == TRUE |
look_right_img == TRUE,
time_since_trial_start >= trial_frame_start,
time_since_trial_start <= 26300)
test_data <- test_data %>% group_by(participant_id, trial_no) %>% mutate(proportion_look_action = mean(look_action_img))
hist(unique(test_data$proportion_look_action),
main = "Histogram of proportion of looks to action image",
xlab = "Proportion of looks to action image")
rm(test_data)
test_data <- test_data %>% group_by(participant_id, trial_no) %>% mutate(trial_prop_action = mean(look_action_img))
test_data <- et_data %>% filter(target_audio_type == "novel",
trial_stage == "event",
look_left_img == TRUE |
look_right_img == TRUE,
time_since_trial_start >= trial_frame_start,
time_since_trial_start <= 26300)
test_data <- test_data %>% group_by(participant_id, trial_no) %>% mutate(trial_prop_action = mean(look_action_img))
hist(unique(test_data$proportion_look_action),
main = "Histogram of proportion of looks to action image",
xlab = "Proportion of looks to action image")
test_data <- test_data %>%
mutate(arcsin_prop_action = asin(sqrt((trial_prop_action))))
hist(unique(test_data$arcsin_prop_action),
main = "Histogram of ArcSin-transformed proportion of looks to action image",
xlab = "ArcSin-transformed proportion of looks to action image")
test_data_collapse <- test_data %>% group_by(participant_id, trial_no) %>%
filter(row_number() == 1) %>% group_by(participant_id) %>%
mutate(subj_prop_action = mean(trial_prop_action))
rm(test_data_collapse)
test_data_uniq <- test_data %>% group_by(participant_id, trial_no) %>%
filter(row_number() == 1) %>% group_by(participant_id) %>%
mutate(subj_prop_action = mean(trial_prop_action))
lin <- lmer(arcsin_prop_action ~ condition + (1|participant_id),
data = test_data_uniq, REML = F)
summary(lin)
test_data_uniq$center_condition <- myCenter(test_data_uniq$condition)
lin.cen <- lmer(arcsin_prop_action ~ center_condition + (1|participant_id),
data = test_data_uniq, REML = F)
summary(lin.cen)
lin.base <- lmer(arcsin_prop_action ~ (1|participant_id), data = test_data_uniq,
REML = F)
summary(lin.base)
anova(lin.cen, lin.base)
lg <- glmer(look_action_img ~ condition +
previous_look_action_img +
(1 + previous_look_action_img | participant_id),
data = test_data,
family = "binomial")
summary(lg)
test_data$center_condition <- myCenter(test_data$condition)
test_data$center_prev_look_action <- myCenter(as.numeric(test_data$previous_look_action_img))
lg.cen <- glmer(look_action_img ~ center_condition + center_prev_look_action +
(1 + center_prev_look_action | participant_id),
data = test_data,
family = "binomial")
summary(lg.cen)
lg.base.prev <- glmer(look_action_video ~ center_condition +
(1 | participant_id),
data = test_data,
family = "binomial")
summary(lg.base.prev)
anova(lg.base.prev, lg.cen)
lg.base.prev <- glmer(look_action_img ~ center_condition +
(1 | participant_id),
data = test_data,
family = "binomial")
summary(lg.base.prev)
anova(lg.base.prev, lg.cen)
diff_prop_action_data = read.csv("../data/diff_prop_action_data.csv", stringsAsFactors = TRUE)
diff.lin <- lmer(diff_prop_action ~ condition + (1|participant_id),
data = diff_prop_action_data, REML= F)
diff.lin <- lmer(trial_diff_prop_action ~ condition + (1|participant_id),
data = diff_prop_action_data, REML= F)
summary(diff.lin)
diff.base <- lmer(trial_diff_prop_action ~ (1|participant_id),
data = diff_prop_action_data, REML= F)
summary(diff.base)
anova(diff.base, diff.lin)
test_data_uniq$lin.fitted = fitted(lin.cen)
cor(test_data_uniq$lin.fitted, test_data_uniq$arcsin_prop_action)
r.squaredGLMM(lin.cen)
